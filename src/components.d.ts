/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    /**
     * A simple list component that uses CSS grid to arrange
     * nested `grid-list-item` elements in one or more columns
     * supporting LTR and RTL languages.
     * Example 1: A grid layout with 3 columns
     * ```html
     * <grid-list columns="3">
     *   <grid-list-item>1</grid-list-item>
     *   <grid-list-item>2</grid-list-item>
     *   <grid-list-item>3</grid-list-item>
     *   <grid-list-item>4</grid-list-item>
     *   <grid-list-item>5</grid-list-item>
     *   <grid-list-item>6</grid-list-item>
     *   <grid-list-item>7</grid-list-item>
     *   <grid-list-item>8</grid-list-item>
     *   <grid-list-item>9</grid-list-item>
     *   <grid-list-item>10</grid-list-item>
     * </grid-list>
     * ```
     * Example 2: A grid layout with a single column
     * ```html
     * <grid-list>
     *   <grid-list-item>1</grid-list-item>
     *   <grid-list-item>2</grid-list-item>
     *   <grid-list-item>3</grid-list-item>
     *   <grid-list-item>4</grid-list-item>
     *   <grid-list-item>5</grid-list-item>
     *   <grid-list-item>6</grid-list-item>
     *   <grid-list-item>7</grid-list-item>
     *   <grid-list-item>8</grid-list-item>
     *   <grid-list-item>9</grid-list-item>
     *   <grid-list-item>10</grid-list-item>
     * </grid-list>
     * ```
     */
    interface GridList {
        /**
          * The number of columns when "layout" is "grid". Defaults to 1.
         */
        "columns"?: number;
        "direction": 'ltr' | 'rtl';
    }
    /**
     * A simple list item component to nest within `grid-list`
     * components to achieve a CSS grid layout that supports LTR
     * & RTL languages.
     * Example: A grid layout with 3 columns
     * ```html
     * <grid-list layout="grid" columns="3">
     *   <grid-list-item>1</grid-list-item>
     *   <grid-list-item>2</grid-list-item>
     *   <grid-list-item>3</grid-list-item>
     *   <grid-list-item>4</grid-list-item>
     *   <grid-list-item>5</grid-list-item>
     *   <grid-list-item>6</grid-list-item>
     *   <grid-list-item>7</grid-list-item>
     *   <grid-list-item>8</grid-list-item>
     *   <grid-list-item>9</grid-list-item>
     *   <grid-list-item>10</grid-list-item>
     * </grid-list>
     * ```
     */
    interface GridListItem {
    }
}
declare global {
    /**
     * A simple list component that uses CSS grid to arrange
     * nested `grid-list-item` elements in one or more columns
     * supporting LTR and RTL languages.
     * Example 1: A grid layout with 3 columns
     * ```html
     * <grid-list columns="3">
     *   <grid-list-item>1</grid-list-item>
     *   <grid-list-item>2</grid-list-item>
     *   <grid-list-item>3</grid-list-item>
     *   <grid-list-item>4</grid-list-item>
     *   <grid-list-item>5</grid-list-item>
     *   <grid-list-item>6</grid-list-item>
     *   <grid-list-item>7</grid-list-item>
     *   <grid-list-item>8</grid-list-item>
     *   <grid-list-item>9</grid-list-item>
     *   <grid-list-item>10</grid-list-item>
     * </grid-list>
     * ```
     * Example 2: A grid layout with a single column
     * ```html
     * <grid-list>
     *   <grid-list-item>1</grid-list-item>
     *   <grid-list-item>2</grid-list-item>
     *   <grid-list-item>3</grid-list-item>
     *   <grid-list-item>4</grid-list-item>
     *   <grid-list-item>5</grid-list-item>
     *   <grid-list-item>6</grid-list-item>
     *   <grid-list-item>7</grid-list-item>
     *   <grid-list-item>8</grid-list-item>
     *   <grid-list-item>9</grid-list-item>
     *   <grid-list-item>10</grid-list-item>
     * </grid-list>
     * ```
     */
    interface HTMLGridListElement extends Components.GridList, HTMLStencilElement {
    }
    var HTMLGridListElement: {
        prototype: HTMLGridListElement;
        new (): HTMLGridListElement;
    };
    /**
     * A simple list item component to nest within `grid-list`
     * components to achieve a CSS grid layout that supports LTR
     * & RTL languages.
     * Example: A grid layout with 3 columns
     * ```html
     * <grid-list layout="grid" columns="3">
     *   <grid-list-item>1</grid-list-item>
     *   <grid-list-item>2</grid-list-item>
     *   <grid-list-item>3</grid-list-item>
     *   <grid-list-item>4</grid-list-item>
     *   <grid-list-item>5</grid-list-item>
     *   <grid-list-item>6</grid-list-item>
     *   <grid-list-item>7</grid-list-item>
     *   <grid-list-item>8</grid-list-item>
     *   <grid-list-item>9</grid-list-item>
     *   <grid-list-item>10</grid-list-item>
     * </grid-list>
     * ```
     */
    interface HTMLGridListItemElement extends Components.GridListItem, HTMLStencilElement {
    }
    var HTMLGridListItemElement: {
        prototype: HTMLGridListItemElement;
        new (): HTMLGridListItemElement;
    };
    interface HTMLElementTagNameMap {
        "grid-list": HTMLGridListElement;
        "grid-list-item": HTMLGridListItemElement;
    }
}
declare namespace LocalJSX {
    /**
     * A simple list component that uses CSS grid to arrange
     * nested `grid-list-item` elements in one or more columns
     * supporting LTR and RTL languages.
     * Example 1: A grid layout with 3 columns
     * ```html
     * <grid-list columns="3">
     *   <grid-list-item>1</grid-list-item>
     *   <grid-list-item>2</grid-list-item>
     *   <grid-list-item>3</grid-list-item>
     *   <grid-list-item>4</grid-list-item>
     *   <grid-list-item>5</grid-list-item>
     *   <grid-list-item>6</grid-list-item>
     *   <grid-list-item>7</grid-list-item>
     *   <grid-list-item>8</grid-list-item>
     *   <grid-list-item>9</grid-list-item>
     *   <grid-list-item>10</grid-list-item>
     * </grid-list>
     * ```
     * Example 2: A grid layout with a single column
     * ```html
     * <grid-list>
     *   <grid-list-item>1</grid-list-item>
     *   <grid-list-item>2</grid-list-item>
     *   <grid-list-item>3</grid-list-item>
     *   <grid-list-item>4</grid-list-item>
     *   <grid-list-item>5</grid-list-item>
     *   <grid-list-item>6</grid-list-item>
     *   <grid-list-item>7</grid-list-item>
     *   <grid-list-item>8</grid-list-item>
     *   <grid-list-item>9</grid-list-item>
     *   <grid-list-item>10</grid-list-item>
     * </grid-list>
     * ```
     */
    interface GridList {
        /**
          * The number of columns when "layout" is "grid". Defaults to 1.
         */
        "columns"?: number;
        "direction"?: 'ltr' | 'rtl';
    }
    /**
     * A simple list item component to nest within `grid-list`
     * components to achieve a CSS grid layout that supports LTR
     * & RTL languages.
     * Example: A grid layout with 3 columns
     * ```html
     * <grid-list layout="grid" columns="3">
     *   <grid-list-item>1</grid-list-item>
     *   <grid-list-item>2</grid-list-item>
     *   <grid-list-item>3</grid-list-item>
     *   <grid-list-item>4</grid-list-item>
     *   <grid-list-item>5</grid-list-item>
     *   <grid-list-item>6</grid-list-item>
     *   <grid-list-item>7</grid-list-item>
     *   <grid-list-item>8</grid-list-item>
     *   <grid-list-item>9</grid-list-item>
     *   <grid-list-item>10</grid-list-item>
     * </grid-list>
     * ```
     */
    interface GridListItem {
    }
    interface IntrinsicElements {
        "grid-list": GridList;
        "grid-list-item": GridListItem;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * A simple list component that uses CSS grid to arrange
             * nested `grid-list-item` elements in one or more columns
             * supporting LTR and RTL languages.
             * Example 1: A grid layout with 3 columns
             * ```html
             * <grid-list columns="3">
             *   <grid-list-item>1</grid-list-item>
             *   <grid-list-item>2</grid-list-item>
             *   <grid-list-item>3</grid-list-item>
             *   <grid-list-item>4</grid-list-item>
             *   <grid-list-item>5</grid-list-item>
             *   <grid-list-item>6</grid-list-item>
             *   <grid-list-item>7</grid-list-item>
             *   <grid-list-item>8</grid-list-item>
             *   <grid-list-item>9</grid-list-item>
             *   <grid-list-item>10</grid-list-item>
             * </grid-list>
             * ```
             * Example 2: A grid layout with a single column
             * ```html
             * <grid-list>
             *   <grid-list-item>1</grid-list-item>
             *   <grid-list-item>2</grid-list-item>
             *   <grid-list-item>3</grid-list-item>
             *   <grid-list-item>4</grid-list-item>
             *   <grid-list-item>5</grid-list-item>
             *   <grid-list-item>6</grid-list-item>
             *   <grid-list-item>7</grid-list-item>
             *   <grid-list-item>8</grid-list-item>
             *   <grid-list-item>9</grid-list-item>
             *   <grid-list-item>10</grid-list-item>
             * </grid-list>
             * ```
             */
            "grid-list": LocalJSX.GridList & JSXBase.HTMLAttributes<HTMLGridListElement>;
            /**
             * A simple list item component to nest within `grid-list`
             * components to achieve a CSS grid layout that supports LTR
             * & RTL languages.
             * Example: A grid layout with 3 columns
             * ```html
             * <grid-list layout="grid" columns="3">
             *   <grid-list-item>1</grid-list-item>
             *   <grid-list-item>2</grid-list-item>
             *   <grid-list-item>3</grid-list-item>
             *   <grid-list-item>4</grid-list-item>
             *   <grid-list-item>5</grid-list-item>
             *   <grid-list-item>6</grid-list-item>
             *   <grid-list-item>7</grid-list-item>
             *   <grid-list-item>8</grid-list-item>
             *   <grid-list-item>9</grid-list-item>
             *   <grid-list-item>10</grid-list-item>
             * </grid-list>
             * ```
             */
            "grid-list-item": LocalJSX.GridListItem & JSXBase.HTMLAttributes<HTMLGridListItemElement>;
        }
    }
}
